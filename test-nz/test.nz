import
	.x incr

fn main Int world World
	incr 1


|| rt List A
||	head A
||	tail List A

|| fn [id A] a A
||	a

|| fn foo Int
||	[id Int] 2

|| un IntOrFloat
||	Int
||	Float


|| fn foo IntOrFloat x IntOrFloat
||	cs x
||		Int @@ i
||			1.0
||		Float @@ f
||			1





|| rt PointOne
||	y Int
|| rt PointTwo
||	x Int
||	y Int

|| fn main Int world World
||	(PointOne @ PointTwo 2 3).y

|| un IntOrBool
||	Int
||	Bool

|| ft Foo
||	IntOrBool x Int

|| fn f Int x IntOrBool
||	123


|| fn main Void world World
||	say-hello: Printer @ world

|| fn say-hello Void printer Printer
||	printer: Print "Hello, world!"

|| ct Printer
||	Void Print

|| fn main Void world World
||	speaker = say-it .. world
||	x = speaker .. "Hello, world!"
||	do x
||	do x
||	do x

|| fn say-it Void message String world World
||	world: Print message

|| fn main Void world World
||	world: Print "One plus one is {1 + 1} you know"

|| ct Printer
|| 	Void Print

|| fn print-factorials Void world World
||	print-factorials-recur 0: Printer world

|| fn print-factorials-recur Void n Int print Printer
||	cond (n == 10) (print: Print n)
||		print: Print n
||		print-factorials-recur (n + 1) print
