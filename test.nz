ct Converter
	Float Int
	Int Float
cn my-cnv Converter
	i Int
		1.0
	f Float
		1

fn my-cnv-b Float i Int
	1.0

|| un IntOrFloat
|| 	Int
|| 	Float

|| fn is-int? Bool x IntOrFloat
|| 	case x
|| 		i Int
|| 			|| + i 1
|| 			true
|| 		f Float
|| 			|| float->int f
|| 			false

|| fn print-factorials Void world World
||	print-factorials-recur 0 world
|| fn print-factorials-recur Void n Int world World
||	cond (n == 10) (world: Print n)
||		world: Print n
||		print-factorials-recur (n + 1) world



|| fn foo Float cnv Converter
||	cnv 0


|| Problem: `cond` must be typed as Void <- Bool Void Void, so can't write factorial too...
|| Generic types can't come soon enough!

|| fn factorial Int x Int
||	less = x < 2
||	cond less 1: x * factorial: x - 1


|| fn incr Int x Int
|| + x 1

|| rc Point
||	x Int
||	y Int

|| fn main Point x Int y Int
||	Point (incr x): incr y
