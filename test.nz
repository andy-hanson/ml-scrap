fn main Void world World
	p = world.print
	say-hello p
	say-hello p

fn say-hello Void printer Print
	printer "Hello world!"

|| rt PointOne
||	y Int
|| rt PointTwo
||	x Int
||	y Int

|| fn main Int world World
||	(PointOne @ PointTwo 2 3).y

|| un IntOrBool
||	Int
||	Bool

|| ft Foo
||	IntOrBool x Int

|| fn f Int x IntOrBool
||	123


|| fn main Void world World
||	say-hello: Printer @ world

|| fn say-hello Void printer Printer
||	printer: Print "Hello, world!"

|| ct Printer
||	Void Print

|| fn main Void world World
||	speaker = say-it .. world
||	x = speaker .. "Hello, world!"
||	do x
||	do x
||	do x

|| fn say-it Void message String world World
||	world: Print message

|| fn main Void world World
||	world: Print "One plus one is {1 + 1} you know"

|| ct Printer
|| 	Void Print

|| fn print-factorials Void world World
||	print-factorials-recur 0: Printer world

|| fn print-factorials-recur Void n Int print Printer
||	cond (n == 10) (print: Print n)
||		print: Print n
||		print-factorials-recur (n + 1) print
